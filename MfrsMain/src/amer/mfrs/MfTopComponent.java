/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package amer.mfrs;

import amer.common.Utilities;
import amer.common.dbHandler;
import amer.common.constant;
import amer.common.ExcelCreator;
import amer.mfrs.models.BlankTable;
import amer.mfrs.models.MCSAccount;
import amer.mfrs.models.MCSService;
import amer.mfrs.models.MCVVai;
import amer.mfrs.models.MCVprofile;
import amer.mfrs.models.MFTableInterface;
import amer.mfrs.models.MOEai;
import amer.mfrs.models.MProProducts;
import amer.mfrs.models.MProPurchased;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.LifecycleManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//amer.mfrs//Mf//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "MfTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "amer.mfrs.MfTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MfAction",
        preferredID = "MfTopComponent"
)
@Messages({
  "CTL_MfAction=MFRS Search",
  "CTL_MfTopComponent=MFRS Search Tool",
  "HINT_MfTopComponent=Search your NOVA data for MFRS here"
})
public final class MfTopComponent extends TopComponent implements PropertyChangeListener {

  public MfTopComponent() {
    customInit();
    initComponents();

    setName(Bundle.CTL_MfTopComponent());
    setToolTipText(Bundle.HINT_MfTopComponent());
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup1 = new javax.swing.ButtonGroup();
    cpvaiBtnGrp = new javax.swing.ButtonGroup();
    jTabbedPane1 = new javax.swing.JTabbedPane();
    PanelO = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    btnOSearch = new javax.swing.JButton();
    jScrollPane3 = new javax.swing.JScrollPane();
    txtOInput = new javax.swing.JTextArea();
    jLabel5 = new javax.swing.JLabel();
    jPanel5 = new javax.swing.JPanel();
    jScrollPane1 = new javax.swing.JScrollPane();
    tOEai = new javax.swing.JTable();
    jPanel6 = new javax.swing.JPanel();
    jScrollPane4 = new javax.swing.JScrollPane();
    tOPro = new javax.swing.JTable();
    jPanel7 = new javax.swing.JPanel();
    jScrollPane5 = new javax.swing.JScrollPane();
    tOPur = new javax.swing.JTable();
    btnOPurSave = new javax.swing.JButton();
    cboOMode = new javax.swing.JComboBox<>();
    PanelPro = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    rbProPro = new javax.swing.JRadioButton();
    rbProPur = new javax.swing.JRadioButton();
    jLabel3 = new javax.swing.JLabel();
    jScrollPane2 = new javax.swing.JScrollPane();
    tProResult = new javax.swing.JTable();
    btnProSearch = new javax.swing.JButton();
    btnProSave = new javax.swing.JButton();
    jLabel4 = new javax.swing.JLabel();
    jScrollPane10 = new javax.swing.JScrollPane();
    txtProInput = new javax.swing.JTextArea();
    PanelCS = new javax.swing.JPanel();
    jLabel6 = new javax.swing.JLabel();
    jScrollPane6 = new javax.swing.JScrollPane();
    txtCSinput = new javax.swing.JTextArea();
    btnCSSearch = new javax.swing.JButton();
    jPanel8 = new javax.swing.JPanel();
    jScrollPane7 = new javax.swing.JScrollPane();
    tCSAcc = new javax.swing.JTable();
    jPanel9 = new javax.swing.JPanel();
    jScrollPane8 = new javax.swing.JScrollPane();
    tCSSvc = new javax.swing.JTable();
    btnCSAsave = new javax.swing.JButton();
    jLabel10 = new javax.swing.JLabel();
    PanelCur = new javax.swing.JPanel();
    jPanel10 = new javax.swing.JPanel();
    jLabel8 = new javax.swing.JLabel();
    txtCurrInput = new javax.swing.JTextField();
    btnCurSearch = new javax.swing.JButton();
    jLabel9 = new javax.swing.JLabel();
    txtCurResult = new javax.swing.JTextField();
    jLabel7 = new javax.swing.JLabel();
    jScrollPane9 = new javax.swing.JScrollPane();
    tCurrency = new javax.swing.JTable();
    jPanel1 = new javax.swing.JPanel();
    btnDBConnect = new javax.swing.JButton();
    PanelExportOrder = new javax.swing.JPanel();
    jScrollPane11 = new javax.swing.JScrollPane();
    txtExpInput = new javax.swing.JTextArea();
    jLabel11 = new javax.swing.JLabel();
    jPanel3 = new javax.swing.JPanel();
    btnExpNOVA = new javax.swing.JButton();
    btnExpICP = new javax.swing.JButton();
    btnExpNp2017 = new javax.swing.JButton();
    jPanel4 = new javax.swing.JPanel();
    jLabel12 = new javax.swing.JLabel();
    jLabel13 = new javax.swing.JLabel();
    PanelCV = new javax.swing.JPanel();
    jLabel14 = new javax.swing.JLabel();
    rbCVCp = new javax.swing.JRadioButton();
    rbCVVai = new javax.swing.JRadioButton();
    cboCVinput = new javax.swing.JComboBox<>();
    btnCVSearch = new javax.swing.JButton();
    btnCVDownload = new javax.swing.JButton();
    jScrollPane12 = new javax.swing.JScrollPane();
    txtCVInput = new javax.swing.JTextArea();
    jScrollPane13 = new javax.swing.JScrollPane();
    tCVResult = new javax.swing.JTable();
    jPanel2 = new javax.swing.JPanel();

    jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel1.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(btnOSearch, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnOSearch.text")); // NOI18N
    btnOSearch.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnOSearchActionPerformed(evt);
      }
    });

    txtOInput.setColumns(20);
    txtOInput.setRows(5);
    jScrollPane3.setViewportView(txtOInput);

    org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel5.text")); // NOI18N

    jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jPanel5.border.title"))); // NOI18N

    tOEai.setModel(tiOEAI);
    tOEai.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jScrollPane1.setViewportView(tOEai);

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
    );
    jPanel5Layout.setVerticalGroup(
      jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel5Layout.createSequentialGroup()
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
        .addContainerGap())
    );

    jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jPanel6.border.title"))); // NOI18N

    tOPro.setModel(tiOPro);
    tOPro.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jScrollPane4.setViewportView(tOPro);

    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
      jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane4)
    );
    jPanel6Layout.setVerticalGroup(
      jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel6Layout.createSequentialGroup()
        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
        .addContainerGap())
    );

    jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jPanel7.border.title"))); // NOI18N

    tOPur.setModel(tiOPur);
    tOPur.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jScrollPane5.setViewportView(tOPur);

    javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
    jPanel7.setLayout(jPanel7Layout);
    jPanel7Layout.setHorizontalGroup(
      jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane5)
    );
    jPanel7Layout.setVerticalGroup(
      jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel7Layout.createSequentialGroup()
        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
        .addContainerGap())
    );

    org.openide.awt.Mnemonics.setLocalizedText(btnOPurSave, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnOPurSave.text")); // NOI18N
    btnOPurSave.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnOPurSaveActionPerformed(evt);
      }
    });

    cboOMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Order Num(s,) | Asset Integ ID(s,)", "Order Num only", "Asset Integ ID only" }));

    javax.swing.GroupLayout PanelOLayout = new javax.swing.GroupLayout(PanelO);
    PanelO.setLayout(PanelOLayout);
    PanelOLayout.setHorizontalGroup(
      PanelOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelOLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PanelOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(PanelOLayout.createSequentialGroup()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnOSearch))
          .addComponent(cboOMode, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(PanelOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(PanelOLayout.createSequentialGroup()
            .addComponent(jLabel5)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnOPurSave))
          .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    PanelOLayout.setVerticalGroup(
      PanelOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelOLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PanelOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(btnOPurSave)
          .addComponent(btnOSearch)
          .addComponent(jLabel1))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(PanelOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(PanelOLayout.createSequentialGroup()
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
          .addGroup(PanelOLayout.createSequentialGroup()
            .addComponent(cboOMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane3))))
    );

    jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.PanelO.TabConstraints.tabTitle"), PanelO); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel2.text")); // NOI18N

    buttonGroup1.add(rbProPro);
    rbProPro.setSelected(true);
    org.openide.awt.Mnemonics.setLocalizedText(rbProPro, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.rbProPro.text")); // NOI18N

    buttonGroup1.add(rbProPur);
    org.openide.awt.Mnemonics.setLocalizedText(rbProPur, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.rbProPur.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel3.text")); // NOI18N

    tProResult.setModel(tiProRes);
    tProResult.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jScrollPane2.setViewportView(tProResult);

    org.openide.awt.Mnemonics.setLocalizedText(btnProSearch, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnProSearch.text")); // NOI18N
    btnProSearch.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnProSearchActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(btnProSave, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnProSave.text")); // NOI18N
    btnProSave.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnProSaveActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel4.text")); // NOI18N

    txtProInput.setColumns(20);
    txtProInput.setRows(5);
    jScrollPane10.setViewportView(txtProInput);

    javax.swing.GroupLayout PanelProLayout = new javax.swing.GroupLayout(PanelPro);
    PanelPro.setLayout(PanelProLayout);
    PanelProLayout.setHorizontalGroup(
      PanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelProLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(PanelProLayout.createSequentialGroup()
            .addGroup(PanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(PanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(PanelProLayout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbProPro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbProPur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnProSearch)
                .addGap(0, 632, Short.MAX_VALUE))
              .addGroup(PanelProLayout.createSequentialGroup()
                .addGap(59, 814, Short.MAX_VALUE)
                .addComponent(btnProSave))))
          .addGroup(PanelProLayout.createSequentialGroup()
            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(PanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(PanelProLayout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(0, 0, Short.MAX_VALUE))
              .addComponent(jScrollPane2))))
        .addContainerGap())
    );
    PanelProLayout.setVerticalGroup(
      PanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelProLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(rbProPro)
          .addComponent(rbProPur)
          .addComponent(btnProSearch))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(PanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(jLabel4)
          .addComponent(btnProSave))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(PanelProLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
          .addComponent(jScrollPane10))
        .addContainerGap())
    );

    jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.PanelPro.TabConstraints.tabTitle"), PanelPro); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel6.text")); // NOI18N

    txtCSinput.setColumns(20);
    txtCSinput.setRows(5);
    jScrollPane6.setViewportView(txtCSinput);

    org.openide.awt.Mnemonics.setLocalizedText(btnCSSearch, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnCSSearch.text")); // NOI18N
    btnCSSearch.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCSSearchActionPerformed(evt);
      }
    });

    jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jPanel8.border.title"))); // NOI18N

    tCSAcc.setModel(tiCSAcc);
    tCSAcc.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jScrollPane7.setViewportView(tCSAcc);

    javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
    jPanel8.setLayout(jPanel8Layout);
    jPanel8Layout.setHorizontalGroup(
      jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
    );
    jPanel8Layout.setVerticalGroup(
      jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel8Layout.createSequentialGroup()
        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
        .addContainerGap())
    );

    jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jPanel9.border.title"))); // NOI18N

    tCSSvc.setModel(tiCSSvc);
    tCSSvc.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jScrollPane8.setViewportView(tCSSvc);

    javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
    jPanel9.setLayout(jPanel9Layout);
    jPanel9Layout.setHorizontalGroup(
      jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
    );
    jPanel9Layout.setVerticalGroup(
      jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel9Layout.createSequentialGroup()
        .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
        .addContainerGap())
    );

    org.openide.awt.Mnemonics.setLocalizedText(btnCSAsave, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnCSAsave.text")); // NOI18N
    btnCSAsave.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCSAsaveActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jLabel10, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel10.text")); // NOI18N

    javax.swing.GroupLayout PanelCSLayout = new javax.swing.GroupLayout(PanelCS);
    PanelCS.setLayout(PanelCSLayout);
    PanelCSLayout.setHorizontalGroup(
      PanelCSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelCSLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PanelCSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
          .addGroup(PanelCSLayout.createSequentialGroup()
            .addComponent(jLabel6)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnCSSearch)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(PanelCSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelCSLayout.createSequentialGroup()
            .addComponent(jLabel10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnCSAsave)))
        .addContainerGap())
    );
    PanelCSLayout.setVerticalGroup(
      PanelCSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelCSLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PanelCSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(PanelCSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(jLabel6)
            .addComponent(btnCSSearch)
            .addComponent(btnCSAsave))
          .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(PanelCSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane6)
          .addGroup(PanelCSLayout.createSequentialGroup()
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addContainerGap())
    );

    jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.PanelCS.TabConstraints.tabTitle"), PanelCS); // NOI18N

    jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jPanel10.border.title"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel8, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel8.text")); // NOI18N

    txtCurrInput.setText(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.txtCurrInput.text")); // NOI18N
    txtCurrInput.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        txtCurrInputKeyPressed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(btnCurSearch, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnCurSearch.text")); // NOI18N
    btnCurSearch.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCurSearchActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(jLabel9, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel9.text")); // NOI18N

    txtCurResult.setEditable(false);
    txtCurResult.setText(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.txtCurResult.text")); // NOI18N

    javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
    jPanel10.setLayout(jPanel10Layout);
    jPanel10Layout.setHorizontalGroup(
      jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel10Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(jPanel10Layout.createSequentialGroup()
            .addComponent(jLabel8)
            .addGap(18, 18, 18)
            .addComponent(txtCurrInput, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanel10Layout.createSequentialGroup()
            .addComponent(jLabel9)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(txtCurResult)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(btnCurSearch)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel10Layout.setVerticalGroup(
      jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel10Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel8)
          .addComponent(txtCurrInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnCurSearch))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel9)
          .addComponent(txtCurResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    org.openide.awt.Mnemonics.setLocalizedText(jLabel7, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel7.text")); // NOI18N

    tCurrency.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {
        { new Integer(36), "A$", "Australian Dollar"},
        { new Integer(40), "ATS", "Austrian Schilling"},
        { new Integer(56), "BEF", "Belgian Franc"},
        { new Integer(124), "CAD", "Canadian Dollar"},
        { new Integer(246), "FIM", "Finnish Markka"},
        { new Integer(250), "FRF", "French Franc"},
        { new Integer(280), "DEM", "Deutsche Mark"},
        { new Integer(300), "GRD", "Greek Drachma"},
        { new Integer(344), "HKD", "Hong Kong Dollar"},
        { new Integer(372), "IEP", "Irish Pound"},
        { new Integer(380), "ITL", "Italian Lira"},
        { new Integer(392), "JPY", "Japanese Yen"},
        { new Integer(442), "LUF", "Luxembourg Franc"},
        { new Integer(458), "MYR", "Malaysian Ringgit"},
        { new Integer(528), "NLG", "Netherlands Guilder"},
        { new Integer(620), "PTE", "Portugese Escudo"},
        { new Integer(702), "SGD", "Singapore Dollar"},
        { new Integer(724), "ESP", "Spanish Peseta"},
        { new Integer(756), "CHF", "Swiss Franc"},
        { new Integer(764), "THB", "Thai Baht"},
        { new Integer(826), "GBP", "British Pound Sterling"},
        { new Integer(840), "USD", "US Dollar"},
        { new Integer(978), "EUR", "Euro"},
        { new Integer(999), "SDR", "Special Drawing Right"}
      },
      new String [] {
        "Code", "Currency", "Name"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.Integer.class, java.lang.String.class, java.lang.String.class
      };
      boolean[] canEdit = new boolean [] {
        false, false, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    jScrollPane9.setViewportView(tCurrency);

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jPanel1.border.title"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(btnDBConnect, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnDBConnect.text")); // NOI18N
    btnDBConnect.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnDBConnectActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(btnDBConnect)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(btnDBConnect)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout PanelCurLayout = new javax.swing.GroupLayout(PanelCur);
    PanelCur.setLayout(PanelCurLayout);
    PanelCurLayout.setHorizontalGroup(
      PanelCurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelCurLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PanelCurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(PanelCurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(PanelCurLayout.createSequentialGroup()
            .addComponent(jLabel7)
            .addGap(0, 0, Short.MAX_VALUE))
          .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 744, Short.MAX_VALUE))
        .addContainerGap())
    );
    PanelCurLayout.setVerticalGroup(
      PanelCurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelCurLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PanelCurLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(PanelCurLayout.createSequentialGroup()
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(PanelCurLayout.createSequentialGroup()
            .addComponent(jLabel7)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)))
        .addContainerGap())
    );

    jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.PanelCur.TabConstraints.tabTitle"), PanelCur); // NOI18N

    txtExpInput.setColumns(20);
    txtExpInput.setRows(5);
    jScrollPane11.setViewportView(txtExpInput);

    org.openide.awt.Mnemonics.setLocalizedText(jLabel11, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel11.text")); // NOI18N

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jPanel3.border.title"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(btnExpNOVA, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnExpNOVA.text")); // NOI18N
    btnExpNOVA.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnExpNOVAActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(btnExpICP, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnExpICP.text")); // NOI18N
    btnExpICP.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnExpICPActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(btnExpNp2017, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnExpNp2017.text")); // NOI18N
    btnExpNp2017.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnExpNp2017ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(btnExpNOVA, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addComponent(btnExpICP, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
          .addComponent(btnExpNp2017, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(btnExpNOVA)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(btnExpICP)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(btnExpNp2017))
    );

    jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jPanel4.border.title"))); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel12, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel12.text")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel13, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel13.text")); // NOI18N

    javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
    jPanel4.setLayout(jPanel4Layout);
    jPanel4Layout.setHorizontalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel12)
          .addComponent(jLabel13))
        .addContainerGap(61, Short.MAX_VALUE))
    );
    jPanel4Layout.setVerticalGroup(
      jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel4Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel12)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jLabel13)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout PanelExportOrderLayout = new javax.swing.GroupLayout(PanelExportOrder);
    PanelExportOrder.setLayout(PanelExportOrderLayout);
    PanelExportOrderLayout.setHorizontalGroup(
      PanelExportOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelExportOrderLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PanelExportOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel11)
          .addGroup(PanelExportOrderLayout.createSequentialGroup()
            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(PanelExportOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addContainerGap(415, Short.MAX_VALUE))
    );
    PanelExportOrderLayout.setVerticalGroup(
      PanelExportOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelExportOrderLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel11)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(PanelExportOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jScrollPane11)
          .addGroup(PanelExportOrderLayout.createSequentialGroup()
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 354, Short.MAX_VALUE)))
        .addContainerGap())
    );

    jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.PanelExportOrder.TabConstraints.tabTitle"), PanelExportOrder); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(jLabel14, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jLabel14.text")); // NOI18N

    cpvaiBtnGrp.add(rbCVCp);
    rbCVCp.setSelected(true);
    org.openide.awt.Mnemonics.setLocalizedText(rbCVCp, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.rbCVCp.text")); // NOI18N
    rbCVCp.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rbCVCpActionPerformed(evt);
      }
    });

    cpvaiBtnGrp.add(rbCVVai);
    org.openide.awt.Mnemonics.setLocalizedText(rbCVVai, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.rbCVVai.text")); // NOI18N
    rbCVVai.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rbCVVaiActionPerformed(evt);
      }
    });

    cboCVinput.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Asset Integ ID", "Account Number | Service Number", "Account Number", "Service Number", " " }));

    org.openide.awt.Mnemonics.setLocalizedText(btnCVSearch, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnCVSearch.text")); // NOI18N
    btnCVSearch.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCVSearchActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(btnCVDownload, org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.btnCVDownload.text")); // NOI18N
    btnCVDownload.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCVDownloadActionPerformed(evt);
      }
    });

    txtCVInput.setColumns(20);
    txtCVInput.setRows(5);
    jScrollPane12.setViewportView(txtCVInput);

    tCVResult.setModel(tiCVRes);
    tCVResult.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
    jScrollPane13.setViewportView(tCVResult);

    javax.swing.GroupLayout PanelCVLayout = new javax.swing.GroupLayout(PanelCV);
    PanelCV.setLayout(PanelCVLayout);
    PanelCVLayout.setHorizontalGroup(
      PanelCVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelCVLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PanelCVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(PanelCVLayout.createSequentialGroup()
            .addComponent(jLabel14)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(rbCVCp)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(rbCVVai))
          .addComponent(jScrollPane12))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(PanelCVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(PanelCVLayout.createSequentialGroup()
            .addComponent(cboCVinput, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnCVSearch)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnCVDownload))
          .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 772, Short.MAX_VALUE))
        .addContainerGap())
    );
    PanelCVLayout.setVerticalGroup(
      PanelCVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(PanelCVLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(PanelCVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel14)
          .addComponent(rbCVCp)
          .addComponent(rbCVVai)
          .addComponent(cboCVinput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnCVSearch)
          .addComponent(btnCVDownload))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(PanelCVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(PanelCVLayout.createSequentialGroup()
            .addComponent(jScrollPane12)
            .addContainerGap())
          .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)))
    );

    jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.PanelCV.TabConstraints.tabTitle"), PanelCV); // NOI18N

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 1041, Short.MAX_VALUE)
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 622, Short.MAX_VALUE)
    );

    jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jPanel2.TabConstraints.tabTitle"), jPanel2); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jTabbedPane1)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jTabbedPane1)
        .addContainerGap())
    );

    jTabbedPane1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jTabbedPane1.AccessibleContext.accessibleName")); // NOI18N
    jTabbedPane1.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(MfTopComponent.class, "MfTopComponent.jTabbedPane1.AccessibleContext.accessibleDescription")); // NOI18N
  }// </editor-fold>//GEN-END:initComponents

  private void btnCurSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCurSearchActionPerformed

    currSearchCurrency();
  }//GEN-LAST:event_btnCurSearchActionPerformed

  private void txtCurrInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCurrInputKeyPressed

    if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
      currSearchCurrency();
    }
  }//GEN-LAST:event_txtCurrInputKeyPressed

  private void btnProSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProSearchActionPerformed
    // TODO add your handling code here:
    mode = "Search Product";

    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();

  }//GEN-LAST:event_btnProSearchActionPerformed

  private void btnOSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOSearchActionPerformed
    // TODO add your handling code here:
    mode = "Search Order";

    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();
  }//GEN-LAST:event_btnOSearchActionPerformed

  private void btnCSSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCSSearchActionPerformed
    // TODO add your handling code here:
    mode = "Search Cost Center";

    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();
  }//GEN-LAST:event_btnCSSearchActionPerformed

  private void btnCSAsaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCSAsaveActionPerformed
    // TODO add your handling code here:
    mode = "Download Cost Center";

    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();
  }//GEN-LAST:event_btnCSAsaveActionPerformed

  private void btnProSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProSaveActionPerformed
    // TODO add your handling code here:
    mode = "Download Product";

    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();
  }//GEN-LAST:event_btnProSaveActionPerformed

  private void btnOPurSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOPurSaveActionPerformed
    // TODO add your handling code here:
    mode = "Download Order";

    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();
  }//GEN-LAST:event_btnOPurSaveActionPerformed

  private void btnDBConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDBConnectActionPerformed
    // TODO add your handling code here:
    mode = "Connect DB";

    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();
  }//GEN-LAST:event_btnDBConnectActionPerformed

  private void btnExpNOVAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpNOVAActionPerformed
    // TODO add your handling code here:
    mode = "Export Order NOVA";
//    Utilities.popup("tak siap lagi");

    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();
  }//GEN-LAST:event_btnExpNOVAActionPerformed

  private void btnExpICPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpICPActionPerformed
    // TODO add your handling code here:
    mode = "Export Order ICP";
//    Utilities.popup("kena confirmkan requirement dulu");

    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();
  }//GEN-LAST:event_btnExpICPActionPerformed

  private void rbCVCpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCVCpActionPerformed
    // TODO add your handling code here:
    cboCVinput.setEnabled(rbCVCp.isSelected());
  }//GEN-LAST:event_rbCVCpActionPerformed

  private void rbCVVaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCVVaiActionPerformed
    // TODO add your handling code here:
    if (rbCVVai.isSelected()) {
      cboCVinput.setSelectedIndex(0);
      cboCVinput.setEnabled(false);
    }
  }//GEN-LAST:event_rbCVVaiActionPerformed

  private void btnCVSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCVSearchActionPerformed
    // TODO add your handling code here:
    mode = "Search CP/VAI";
    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();
  }//GEN-LAST:event_btnCVSearchActionPerformed

  private void btnExpNp2017ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpNp2017ActionPerformed
    // TODO add your handling code here:
    mode = "Export Order NOVA < 2017";
    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();
  }//GEN-LAST:event_btnExpNp2017ActionPerformed

  private void btnCVDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCVDownloadActionPerformed
    // TODO add your handling code here:
    mode = "Download CP/VAI";
    BgWorker pw = new BgWorker();
    pw.addPropertyChangeListener(this);
    pw.execute();
  }//GEN-LAST:event_btnCVDownloadActionPerformed

  // <editor-fold defaultstate="collapsed" desc="auto swing objs"> 

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel PanelCS;
  private javax.swing.JPanel PanelCV;
  private javax.swing.JPanel PanelCur;
  private javax.swing.JPanel PanelExportOrder;
  private javax.swing.JPanel PanelO;
  private javax.swing.JPanel PanelPro;
  private javax.swing.JButton btnCSAsave;
  private javax.swing.JButton btnCSSearch;
  private javax.swing.JButton btnCVDownload;
  private javax.swing.JButton btnCVSearch;
  private javax.swing.JButton btnCurSearch;
  private javax.swing.JButton btnDBConnect;
  private javax.swing.JButton btnExpICP;
  private javax.swing.JButton btnExpNOVA;
  private javax.swing.JButton btnExpNp2017;
  private javax.swing.JButton btnOPurSave;
  private javax.swing.JButton btnOSearch;
  private javax.swing.JButton btnProSave;
  private javax.swing.JButton btnProSearch;
  private javax.swing.ButtonGroup buttonGroup1;
  private javax.swing.JComboBox<String> cboCVinput;
  private javax.swing.JComboBox<String> cboOMode;
  private javax.swing.ButtonGroup cpvaiBtnGrp;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel10;
  private javax.swing.JLabel jLabel11;
  private javax.swing.JLabel jLabel12;
  private javax.swing.JLabel jLabel13;
  private javax.swing.JLabel jLabel14;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JLabel jLabel8;
  private javax.swing.JLabel jLabel9;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel10;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanel4;
  private javax.swing.JPanel jPanel5;
  private javax.swing.JPanel jPanel6;
  private javax.swing.JPanel jPanel7;
  private javax.swing.JPanel jPanel8;
  private javax.swing.JPanel jPanel9;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane10;
  private javax.swing.JScrollPane jScrollPane11;
  private javax.swing.JScrollPane jScrollPane12;
  private javax.swing.JScrollPane jScrollPane13;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JScrollPane jScrollPane4;
  private javax.swing.JScrollPane jScrollPane5;
  private javax.swing.JScrollPane jScrollPane6;
  private javax.swing.JScrollPane jScrollPane7;
  private javax.swing.JScrollPane jScrollPane8;
  private javax.swing.JScrollPane jScrollPane9;
  private javax.swing.JTabbedPane jTabbedPane1;
  private javax.swing.JRadioButton rbCVCp;
  private javax.swing.JRadioButton rbCVVai;
  private javax.swing.JRadioButton rbProPro;
  private javax.swing.JRadioButton rbProPur;
  private javax.swing.JTable tCSAcc;
  private javax.swing.JTable tCSSvc;
  private javax.swing.JTable tCVResult;
  private javax.swing.JTable tCurrency;
  private javax.swing.JTable tOEai;
  private javax.swing.JTable tOPro;
  private javax.swing.JTable tOPur;
  private javax.swing.JTable tProResult;
  private javax.swing.JTextArea txtCSinput;
  private javax.swing.JTextArea txtCVInput;
  private javax.swing.JTextField txtCurResult;
  private javax.swing.JTextField txtCurrInput;
  private javax.swing.JTextArea txtExpInput;
  private javax.swing.JTextArea txtOInput;
  private javax.swing.JTextArea txtProInput;
  // End of variables declaration//GEN-END:variables

  // </editor-fold>
  private dbHandler dbStg;
  private final String me = "MFRS log";
  private MFTableInterface tiProRes;
  private MFTableInterface tiOEAI;
  private MFTableInterface tiOPro;
  private MFTableInterface tiOPur;
  private MFTableInterface tiCSSvc;
  private MFTableInterface tiCSAcc;
  private MFTableInterface tiCVRes;
  private ProgressHandle pbar;
  private String mode;
  private ArrayList<String> inputdata;
  private boolean noFileCHoosen;

  @Override
  public void componentOpened() {
    // TODO add custom code on component opening
    openconn();
  }

  @Override
  public void componentClosed() {
    // TODO add custom code on component closing
    closeDBss();
  }

  void writeProperties(java.util.Properties p) {
    // better to version settings since initial version as advocated at
    // http://wiki.apidesign.org/wiki/PropertyFiles
    p.setProperty("version", "1.0");
    // TODO store your settings
  }

  void readProperties(java.util.Properties p) {
    String version = p.getProperty("version");
    // TODO read your settings according to their version
  }

  // functions
  // ================
  // general
  private void customInit() {

    dbStg = new dbHandler("STG");
    dbStg.setDBConnInfo(constant.dbStgCon);
    dbStg.setUserPass(constant.dbStgUser, constant.dbStgPass);

    // set all the tables to a blank table
    tiCSAcc = new BlankTable();
    tiCSSvc = tiCSAcc;
    tiOEAI = tiCSAcc;
    tiOPro = tiCSAcc;
    tiOPur = tiCSAcc;
    tiProRes = tiCSAcc;
    tiCVRes = tiCSAcc;

    mode = "";

  }

  private void openconn() {
    initPBar("Trying to connect to DB");
    pbar.start();
    lockSearch();
    try {
      System.out.println("COnnecting to DB");
      btnDBConnect.setEnabled(false);
      connectStg();
      unlockSearch();
    } catch (SQLException e) {
      Utilities.logStack(me, e);
      btnDBConnect.setEnabled(true);
    }

    pbar.finish();
  }

  private void initPBar(String name) {
    pbar = ProgressHandleFactory.createHandle(name);
  }

  private void connectStg() throws SQLException {
    try {

      dbStg.openConnection();
      Utilities.popup("Connected to DB");
    } catch (SQLException e) {

      Utilities.popup("Error connecting to DB STG : " + e.getMessage());
      Utilities.log(me, "error connecting to DB STG", 1);
      throw e;
    }

  }

  private void closeDBss() {
    try {
      dbStg.closeConnection();
    } catch (Exception e) {
    }
  }

  private void lockSearch() {
    btnCSSearch.setEnabled(false);
    btnOSearch.setEnabled(false);
    btnProSearch.setEnabled(false);
    btnOPurSave.setEnabled(false);
    btnProSave.setEnabled(false);
    btnCSAsave.setEnabled(false);
    btnExpICP.setEnabled(false);
    btnExpNOVA.setEnabled(false);
    btnCVSearch.setEnabled(false);
    btnCVDownload.setEnabled(false);
    btnExpNp2017.setEnabled(false);
  }

  private void unlockSearch() {
    btnCSSearch.setEnabled(true);
    btnOSearch.setEnabled(true);
    btnProSearch.setEnabled(true);
    btnOPurSave.setEnabled(true);
    btnProSave.setEnabled(true);
    btnCSAsave.setEnabled(true);
    btnExpICP.setEnabled(true);
    btnExpNOVA.setEnabled(true);
    btnCVSearch.setEnabled(true);
    btnCVDownload.setEnabled(true);
    btnExpNp2017.setEnabled(true);
  }

  private boolean loadInput(JTextArea inputArea) {
    String data = inputArea.getText();
    inputdata = new ArrayList<String>();

    Scanner sc = new Scanner(data);

    while (sc.hasNextLine()) {
      String line = sc.nextLine().trim();
      if (line.isEmpty()) {
        continue;
      }

      inputdata.add(line);
    }

    Utilities.log(me, inputdata.size() + " data to process", constant.DEBUG);

    if (inputdata.isEmpty()) {
      Utilities.popup("No data to process");
    }

    return !inputdata.isEmpty();

  }

  private File getSaveLocation() {
    File savefile = null;
    noFileCHoosen = true;
    String suggestfname;

    switch (mode) {
      case "Download Order":
        suggestfname = "order";
        break;
      case "Download Product":
        suggestfname = "prodak";
        break;
      case "Export Order ICP":
        suggestfname = "icp_order";
        break;
      case "Export Order NOVA":
        suggestfname = "nova_order";
        break;
      case "Export Order NOVA < 2017":
        suggestfname = "nova_order";
        break;
      case "Download Cost Center":
        suggestfname = "kosenter";
        break;
      case "Download CP/VAI":
        suggestfname = "cp_vai";
        break;
      case "Download Product Master":
        suggestfname = "bossprodak";
        break;
      default:
        suggestfname = "download";
        break;
    }

    JFileChooser fc = new JFileChooser();
    String filets = Utilities.tsToDateNow("yyMMdd");
    fc.setFileFilter(new FileNameExtensionFilter("MS Excel", "xls"));
    fc.setSelectedFile(new File(suggestfname + "_" + filets + ".xls"));

    if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
      savefile = fc.getSelectedFile();

      if (!savefile.getAbsolutePath().toLowerCase().endsWith(".xls")) {
        savefile = new File(savefile.getAbsolutePath() + ".xls");
      }

      if (savefile.exists()) {
        int choice = JOptionPane.showConfirmDialog(null, "File exist: " + savefile.getName() + ". Overwrite?");

        if (choice == JOptionPane.YES_OPTION) {
          noFileCHoosen = false;
        } else if (choice == JOptionPane.NO_OPTION) {
          savefile = getSaveLocation();
        } else {
          Utilities.popup("Cancelled");
        }
      } else {
        noFileCHoosen = false;
      }

    }

    return savefile;
  }

  // ==================
  // currency
  private void currSearchCurrency() {
    TableModel aa = tCurrency.getModel();
    String input = txtCurrInput.getText();
    String output = "Not found";
    int ainput = 0;

    if (input == null) {
      return;
    }

    if (input.trim().isEmpty()) {
      return;
    }

    try {
      ainput = Integer.parseInt(input);
    } catch (NumberFormatException e) {
      Utilities.popup("Invalid input: " + input);
      return;
    }

    // search for the input from the table
    for (int i = 0; i < 24; i++) {
      if ((int) aa.getValueAt(i, 0) == ainput) {
        output = (String) aa.getValueAt(i, 1);
        break;
      }
    }

    txtCurResult.setText(output);
  }

  @Override
  public void propertyChange(PropertyChangeEvent evt) {

  }

  // ===============================
  // the swing workers
  class BgWorker extends SwingWorker<Void, Void> {

    @Override
    protected Void doInBackground() throws Exception {

      if (mode.equals("Connect DB")) {
        openconn();
        return null;
      }

      Utilities.log(me, "mode: " + mode, constant.MESSAGE);

      initPBar(mode);
      lockSearch();

      pbar.start();

      switch (mode) {
        case "Search Product":
          proSearch();
          break;
        case "Search Order":
          oSearch();
          break;
        case "Search Cost Center":
          csSearch();
          break;
        case "Download Order":
          oDownload();
          break;
        case "Download Product":
          proDownload();
          break;
        case "Download CP/VAI":
          cvDownload();
          break;
        case "Search CP/VAI":
          cvSearch();
          break;
        case "Download Cost Center":
          csDownload();
          break;
        case "Export Order ICP":
          expICP();
          break;
        case "Export Order NOVA":
          expNOVA();
          break;
        case "Export Order NOVA < 2017":
          expNOVAOld();
          break;
        default:
          break;
      }

      unlockSearch();
      pbar.finish();
      return null;
    }

    private void expICP() {
      pbar.progress("Loading input");
      if (!loadInput(txtExpInput)) {
        return;
      }

      File save = getSaveLocation();

      if (noFileCHoosen) {
        return;
      }

      ExcelCreator ec = new ExcelCreator(save);
      String[] header = {"ROW_ID",
        "PROM_INTEG_ID",
        "ASSET_INTEG_ID",
        "PAR_ORDER_ITEM_ID",
        "ROOT_ORDER_ITEM_ID",
        "ORDER_ID",
        "ORDER_TYPE",
        "ACTION_CODE",
        "CREATED_DATE",
        "AGENT_CODE",
        "OUTLET_CODE",
        "SERVICE_START_DATE",
        "SERVICE_END_DATE",
        "CURRENCY",
        "QUANTITY",
        "CUSTOMER_ACCOUNT_ROW_ID",
        "CUSTOMER_NAME",
        "BILLING_NAME",
        "ACCOUNT_NO",
        "SERVICE_ID",
        "INDUSTRY_CODE",
        "SEGMENT_GROUP",
        "SEGMENT_CODE",
        "WHOLESALE_ID",
        "RELATIONSHIP_CODE",
        "PRODUCT_NAME",
        "SERVICE_LEVEL",
        "PRODUCT_TYPE",
        "PRODUCT_GROUP",
        "PART_NUMBER",
        "SERVICE_TYPE",
        "BILLING_PERIOD_DATE",
        "CHARGE_CYCLE",
        "ASSET_ID",
        "SERVICE_CLASS_CODE",
        "COMPLETE_DT",
        "LOADING_DATE",
        "UNIT",
        "VALUE",
        "FTA_PROMO",
        "FTA_PERCENTAGE",
        "FTA_DURATION",
        "FTA_DISC_END_DATE",
        "PRODUCT_TYPE_2",
        "MOLI_COMPLETED_DATE",
        "TRADING_PARTNER_ID"};
      ec.addSheet("ICP order", header);

      PreparedStatement ps;

      try {
        ps = dbStg.createPS("select * from mfrsadm.icp_siebel_order@EDWH_LINK_OPERATE where order_id = ? ");
      } catch (Exception e) {
        Utilities.popup("Error Prepping DB query: " + e.getMessage());
        Utilities.log(me, "error creating prepared statement", 1);
        return;
      }

      int counter = 0;
      pbar.switchToDeterminate(inputdata.size());

      for (String order : inputdata) {
        pbar.progress(order, counter);
        counter++;

        try {
          ps.setString(1, order);
          ResultSet rs = ps.executeQuery();

          while (rs.next()) {
            ArrayList<String> data = getExpData(rs, header);

            ec.addline(data);

          }

        } catch (SQLException e) {
          Utilities.log(me, "Error processing " + order + ". " + e.toString(), constant.ERROR);
        }

      }

      ec.flush();
      int choice = JOptionPane.showConfirmDialog(null, "Export completed. Show output?", "Dah siap...", JOptionPane.YES_NO_OPTION);

      if (choice == JOptionPane.YES_OPTION) {
        ec.openOutDir();
      }

    }

    private void expNOVA() {
      pbar.progress("Loading input");
      if (!loadInput(txtExpInput)) {
        return;
      }

      File save = getSaveLocation();

      if (noFileCHoosen) {
        return;
      }

      ExcelCreator ec = new ExcelCreator(save);
      String[] header = {"ROW_ID",
        "PROM_INTEG_ID",
        "PAR_ORDER_ITEM_ID",
        "ASSET_INTEG_ID",
        "ROOT_ORDER_ITEM_ID",
        "CUSTOMER_ROWID",
        "ORDER_NUMBER",
        "ORDER_ID",
        "ORDER_TYPE",
        "CREATED",
        "SUBMIT_DATE",
        "COMPLETED_DATE",
        "BILLING_NUMBER",
        "SMART_PROJECT_NAME",
        "SERVICE_NUM",
        "COMMITMENT_START_DATE",
        "STATUS",
        "QUANTITY",
        "CURRENCY",
        "INDUSTRY_CODE",
        "RELATIONSHIP_CODE",
        "PRODUCT",
        "PART_NUMBER",
        "BANDWIDTH",
        "BANDWIDTH_SERVICE",
        "QOS_SERVICE",
        "SERVICE_LEVEL_SERVICE",
        "BANDWIDTH_ACCESS",
        "SERVICE_LEVEL_ACCESS",
        "BANDWIDTH_PE_PORT",
        "SERVICE_LEVEL_PE_PORT",
        "SERVICE_LEVEL",
        "QOS",
        "SERVICE_CHARGE_CYCLE",
        "CHARGE_CYCLE",
        "INTERNET_RATIO",
        "SUB_PACKAGE",
        "LOCATION",
        "ACCESS_TYPE",
        "PORT_TIER",
        "PORT_PROVIDER",
        "COUNTRY",
        "PURPOSE",
        "SERVICE_PROVIDER_PRICELIST",
        "NUMBER_OF_MONTHS",
        "NUMBER_OF_MONTHS_NONCONS",
        "ACTION",
        "NUMBER_OF_YEARS",
        "BANDWIDTH_TRUNK_DISTANCE",
        "TRUNK_DISTANCE_TYPE",
        "TRUNK_DISTANCE",
        "UNIT",
        "VALUE",
        "CIRCUIT_TYPE",
        "CUSTOMER_TYPE",
        "INFRA_COMMITMENT_PERIOD",
        "HSBA_SERVICE_TYPE",
        "VLAN_ID",
        "EQUIPMENT_VENDOR",
        "EQUIPMENT_MODEL",
        "ACTION_CODE",
        "PRODUCT_TYPE",
        "SERVICE_TYPE",
        "PRODUCT_INDICATOR",
        "ACCOUNT_NAME",
        "CUSTOMER_ID",
        "BILLING_NAME",
        "ORDER_SOURCE",
        "SEGMENT_GROUP",
        "SEGMENT_SUB_GROUP",
        "SEGMENT_CODE",
        "BILL_CYCLE",
        "OUTLET_CODE",
        "SALES_PERSON_ID",
        "COMMISSION_PERSON_ID",
        "COMMISSION_PERSON_NAME",
        "LIST_PRICE",
        "START_PRICE",
        "PRODUCT_GROUP",
        "NETWORK_ORDER",
        "NET_PRICE",
        "FUTURE_DATE",
        "SUBMITTED_BY_ID",
        "ORDER_STATUS",
        "BILLING_EFFECTIVE_DATE",
        "SERVICE_TYPE_2",
        "PROMOTION_TAGGING",
        "FTA_DISCOUNT_DURATION",
        "FTA_DISCOUNT_END_DATE",
        "FTA_DISCOUNT_PERCENTAGE",
        "TRADING_PARTNER_ID",
        "NETWORK_PRODUCT_TYPE",
        "NETWORK_SERVICE_ID",
        "NETWORK_LAYER",
        "LAST_UPD",
        "LOADING_DATE",
        "BILLING_TERMINATION_DATE",
        "FRS_IND",
        "SSP_PRICE",
        "OCCUPANCY_RATE_PERCENTAGE",
        "SSP_NGBH",
        "EXCLUDE",
        "OLD_SERVICE_NUM",
        "TECHNICAL_SLG",
        "ROW_ID_COMMITMENT",
        "LINE_ITEM_STATUS",
        "ENCAPSULATION_MODE",
        "TYPE_IP_PORT"};
      ec.addSheet("NOVA order", header);

      PreparedStatement ps;

      try {
        ps = dbStg.createPS("select * from mfrsadm.nova_siebel_order@EDWH_LINK_OPERATE where order_number = ? ");
      } catch (Exception e) {
        Utilities.popup("Error Prepping DB query: " + e.getMessage());
        Utilities.log(me, "error creating prepared statement", 1);
        return;
      }

      int counter = 0;
      pbar.switchToDeterminate(inputdata.size());

      for (String order : inputdata) {
        pbar.progress(order, counter);
        counter++;

        try {
          ps.setString(1, order);
          ResultSet rs = ps.executeQuery();

          while (rs.next()) {
            ArrayList<String> data = getExpData(rs, header);

            ec.addline(data);

          }

        } catch (SQLException e) {
          Utilities.log(me, "Error processing " + order + ". " + e.toString(), constant.ERROR);
        }

      }

      ec.flush();
      int choice = JOptionPane.showConfirmDialog(null, "Export completed. Show output?", "Dah siap...", JOptionPane.YES_NO_OPTION);

      if (choice == JOptionPane.YES_OPTION) {
        ec.openOutDir();
      }
    }

    private void expNOVAOld() {
      pbar.progress("Loading input");
      if (!loadInput(txtExpInput)) {
        return;
      }

      File save = getSaveLocation();

      if (noFileCHoosen) {
        return;
      }

      ExcelCreator ec = new ExcelCreator(save);
      String[] header = {"ROW_ID", "PROM_INTEG_ID", "PAR_ORDER_ITEM_ID", "ASSET_INTEG_ID",
        "ROOT_ORDER_ITEM_ID", "CUSTOMER_ROWID", "ORDER_NUMBER", "ORDER_ID", "ORDER_TYPE",
        "CREATED", "SUBMIT_DATE", "COMPLETED_DATE", "BILLING_NUMBER", "SMART_PROJECT_NAME",
        "SERVICE_NUM", "COMMITMENT_START_DATE", "STATUS", "QUANTITY", "CURRENCY", "INDUSTRY_CODE",
        "RELATIONSHIP_CODE", "PRODUCT", "PART_NUMBER", "BANDWIDTH", "BANDWIDTH_SERVICE",
        "QOS_SERVICE", "SERVICE_LEVEL_SERVICE", "BANDWIDTH_ACCESS", "SERVICE_LEVEL_ACCESS",
        "BANDWIDTH_PE_PORT", "SERVICE_LEVEL_PE_PORT", "SERVICE_LEVEL", "QOS",
        "SERVICE_CHARGE_CYCLE", "CHARGE_CYCLE", "INTERNET_RATIO", "SUB_PACKAGE", "LOCATION",
        "ACCESS_TYPE", "PORT_TIER", "PORT_PROVIDER", "COUNTRY", "PURPOSE", "SERVICE_PROVIDER_PRICELIST",
        "NUMBER_OF_MONTHS", "NUMBER_OF_MONTHS_NONCONS", "ACTION", "NUMBER_OF_YEARS",
        "BANDWIDTH_TRUNK_DISTANCE", "TRUNK_DISTANCE_TYPE", "TRUNK_DISTANCE", "UNIT",
        "VALUE", "CIRCUIT_TYPE", "CUSTOMER_TYPE", "INFRA_COMMITMENT_PERIOD", "HSBA_SERVICE_TYPE",
        "VLAN_ID", "EQUIPMENT_VENDOR", "EQUIPMENT_MODEL", "ACTION_CODE", "PRODUCT_TYPE",
        "SERVICE_TYPE", "PRODUCT_INDICATOR", "ACCOUNT_NAME", "CUSTOMER_ID", "BILLING_NAME",
        "ORDER_SOURCE", "SEGMENT_GROUP", "SEGMENT_SUB_GROUP", "SEGMENT_CODE", "BILL_CYCLE",
        "OUTLET_CODE", "SALES_PERSON_ID", "COMMISSION_PERSON_ID", "COMMISSION_PERSON_NAME",
        "LIST_PRICE", "START_PRICE", "PRODUCT_GROUP", "NETWORK_ORDER", "NET_PRICE", "FUTURE_DATE",
        "SUBMITTED_BY_ID", "ORDER_STATUS", "BILLING_EFFECTIVE_DATE", "SERVICE_TYPE_2",
        "PROMOTION_TAGGING", "FTA_DISCOUNT_DURATION", "FTA_DISCOUNT_END_DATE",
        "FTA_DISCOUNT_PERCENTAGE", "TRADING_PARTNER_ID", "NETWORK_PRODUCT_TYPE",
        "NETWORK_SERVICE_ID", "NETWORK_LAYER", "LOADING_DATE", "FRS_IND", "SSP_PRICE",
        "OCCUPANCY_RATE_PERCENTAGE", "SSP_NGBH", "EXCLUDE", "OLD_SERVICE_NUM", "TECHNICAL_SLG",
        "ROW_ID_COMMITMENT", "LAST_UPD", "LINE_ITEM_STATUS"};

      ec.addSheet("NOVA order", header);

      PreparedStatement ps;

      try {
        ps = dbStg.createPS("select * from mfrsadm.NOVA_SIEBEL_ORDER_MIGRATE@EDWH_LINK_OPERATE where order_number = ? ");
      } catch (Exception e) {
        Utilities.popup("Error Prepping DB query: " + e.getMessage());
        Utilities.log(me, "error creating prepared statement", 1);
        return;
      }

      int counter = 0;
      pbar.switchToDeterminate(inputdata.size());

      for (String order : inputdata) {
        pbar.progress(order, counter);
        counter++;

        try {
          ps.setString(1, order);
          ResultSet rs = ps.executeQuery();

          while (rs.next()) {
            ArrayList<String> data = getExpData(rs, header);

            ec.addline(data);

          }

        } catch (SQLException e) {
          Utilities.log(me, "Error processing " + order + ". " + e.toString(), constant.ERROR);
        }

      }

      ec.flush();
      int choice = JOptionPane.showConfirmDialog(null, "Export completed. Show output?", "Dah siap...", JOptionPane.YES_NO_OPTION);

      if (choice == JOptionPane.YES_OPTION) {
        ec.openOutDir();
      }
    }

    private void expProductMaster(){
      
      File save = getSaveLocation();

      if (noFileCHoosen) {
        return;
      }
      
      ExcelCreator ec = new ExcelCreator(save);
      String[] header = {
        "PRODUCT", "PARTNUM", "PRICE", "CURRENCY", "PRICELIST", 
        "PRICE_TYPE_CD", "PROD_CD", "NETWORK_ELEMENT_TYPE", "PRODUCT_GROUP", "TYPE", 
        "BILLABLE_FLAG", "INDICATOR", "UOM_CD", "PRODUCT_NETWORK_LAYER", "NETWORK_TYPE", 
        "NETWORK_PRODUCT_TYPE", "SERVICE_TYPE_2", "FRS_NONFRS_IND"
      };
      
      
      
      
    }
    
    private ArrayList<String> getExpData(ResultSet rs, String[] header) {
      ArrayList<String> data = new ArrayList<String>();

      for (String aa : header) {
        try {
          String d = dbHandler.dbGetString(rs, aa);
          data.add(d);
        } catch (SQLException e) {
          Utilities.log(me, "getExpData err: " + aa + " " + e.getMessage(), constant.ERROR);
          data.add("");
        }

      }

      return data;
    }

    private void proSearch() {

      pbar.progress("Loading input");
      if (!loadInput(txtProInput)) {
        return;
      }

//      pbar.progress("Establishing connection to DB");
//      try {
//        connectStg();
//      } catch (SQLException e) {
//        return;
//      }
      String sql;
      boolean ispro;
      PreparedStatement ps;

      if (rbProPro.isSelected()) {
        sql = "select * from MFRSADM.nova_brm_product_glid@EDWH_LINK_OPERATE where poid_Id0 = ? ";
        ispro = true;
        tiProRes = new MProProducts();
      } else if (rbProPur.isSelected()) {
        sql = "select * from MFRSADM.nova_brm_purchase_product@EDWH_LINK_OPERATE where purchased_poid = ? ";
        ispro = false;
        tiProRes = new MProPurchased();
      } else {
        Utilities.popup("Please select which detail to search for.");
        return;
      }

      tProResult.setModel(tiProRes);

      // create the prepared statements
      try {
        ps = dbStg.createPS(sql);
      } catch (SQLException e) {
        Utilities.popup("Error Prepping DB query: " + e.getMessage());
        Utilities.log(me, "error creating prepared statement", 1);
        return;
      }

      // begin process the list
      int counter = 0;
      pbar.switchToDeterminate(inputdata.size());
      for (String input : inputdata) {

        counter++;
        pbar.progress(input, counter);

        try {
          ps.setString(1, input);
          ResultSet rs = ps.executeQuery();

          if (ispro) {
            loadProduct(rs, input);
          } else {
            loadPurchased(rs, input);
          }

          tiProRes.refire();
        } catch (SQLException e) {
          Utilities.log(me, "Error processing " + input + ". " + e.toString(), constant.ERROR);
        }

      }

//      closeDBs();
    }

    private void csSearch() {
      pbar.progress("Loading input");
      if (!loadInput(txtCSinput)) {
        return;
      }

//      pbar.progress("Establishing connection to DB");
//      try {
//        connectStg();
//      } catch (SQLException e) {
//        return;
//      }
      PreparedStatement psAcc;
      PreparedStatement psSvc;

      tiCSAcc = new MCSAccount();
      tiCSSvc = new MCSService();

      tCSAcc.setModel(tiCSAcc);
      tCSSvc.setModel(tiCSSvc);

      // create the prepared statements
      try {
        psAcc = dbStg.createPS("select * from tmsoa_user.NOVA_ACCT_COST_CENTER@EDWH_LINK_OPERATE where account_number = ? ");
        psSvc = dbStg.createPS("select * from tmsoa_user.NOVA_SERV_COST_CENTER@EDWH_LINK_OPERATE where account_no = ? ");

      } catch (SQLException e) {
        Utilities.popup("Error Prepping DB query: " + e.getMessage());
        Utilities.log(me, "error creating prepared statement", 1);
//        closeDBs();
        return;
      }

      // begin process the list
      int counter = 0;
      pbar.switchToDeterminate(inputdata.size());
      for (String input : inputdata) {

        counter++;
        pbar.progress(input, counter);

        // account cost center
        try {
          psAcc.setString(1, input);
          ResultSet rs = psAcc.executeQuery();

          while (rs.next()) {
            ArrayList<String> data = new ArrayList<String>();
            data.add(dbHandler.dbGetString(rs, "ACCOUNT_NUMBER"));
            data.add(dbHandler.dbGetString(rs, "ACCOUNT_OBJ_ID0"));
            data.add(dbHandler.dbGetString(rs, "segment_code"));
            data.add(dbHandler.dbGetString(rs, "industry_code"));
            data.add(dbHandler.dbGetString(rs, "ptt"));
            data.add(dbHandler.dbGetString(rs, "exchange_id"));
            data.add(dbHandler.dbGetString(rs, "cost_center"));
            data.add(dbHandler.dbGetString(rs, "acct_status"));
            data.add(dbHandler.dbGetString(rs, "acct_effective_t"));
            data.add(dbHandler.dbGetString(rs, "acct_Created_t"));

            tiCSAcc.add(data);

          }

        } catch (SQLException e) {
          Utilities.log(me, "Error getting account cost center for " + input + ". " + e.toString(), constant.ERROR);
        }

        // service cost center
        try {
          psSvc.setString(1, input);
          ResultSet rs = psSvc.executeQuery();

          while (rs.next()) {
            ArrayList<String> data = new ArrayList<String>();
            data.add(dbHandler.dbGetString(rs, "ACCOUNT_NO"));
            data.add(dbHandler.dbGetString(rs, "service_obj_Id0"));
            data.add(dbHandler.dbGetString(rs, "service_no"));
            data.add(dbHandler.dbGetString(rs, "segment_code"));
            data.add(dbHandler.dbGetString(rs, "industry_code"));
            data.add(dbHandler.dbGetString(rs, "ptt"));
            data.add(dbHandler.dbGetString(rs, "exchange_id"));
            data.add(dbHandler.dbGetString(rs, "cost_center"));

            tiCSSvc.add(data);
          }

        } catch (SQLException e) {
          Utilities.log(me, "Error getting service cost center for " + input + ". " + e.toString(), constant.ERROR);
        }

        tiCSAcc.refire();
        tiCSSvc.refire();

      }

//      closeDBs();
    }

    private void oSearch() {
      pbar.progress("Loading input");
      if (!loadInput(txtOInput)) {
        return;
      }

//      pbar.progress("Establishing connection to DB");
//      try {
//        connectStg();
//        
//      } catch (SQLException e) {
//        return;
//      }
      PreparedStatement psOEai;
      PreparedStatement psBPro;
      PreparedStatement psBPur;

      tiOEAI = new MOEai();
      tiOPro = new MProProducts();
      tiOPur = new MProPurchased();

      tOEai.setModel(tiOEAI);
      tOPro.setModel(tiOPro);
      tOPur.setModel(tiOPur);

      int smode = cboOMode.getSelectedIndex();

      // create the prepared statements
      try {
        psOEai = dbStg.createPS("select sbl.order_number,\n"
                + "sbl.asset_integ_id,\n"
                + "sbl.product_type,\n"
                + "sbl.BILLING_NUMBER,\n"
                + "sbl.relationship_code,\n"
                + "sbl.currency,\n"
                + "sbl.part_number,\n"
                + "sbl.order_type,\n"
                + "sbl.action_code,\n"
                + "sbl.product,\n"
                + "sbl.completed_date,\n"
                + "eai.brm_purchased_product_poid,\n"
                + "eai.brm_product_poid,\n"
                + "eai.sub_prod_type\n"
                + "from mfrsadm.nova_siebel_order@EDWH_LINK_OPERATE sbl full join \n"
                + "brm_xref_product_mapping_nova@EDWH_LINK_OPERATE eai \n"
                + "on sbl.asset_integ_id = eai.siebel_asset_id\n"
                + "where \n"
                + (smode == 1 ? "" : " sbl.asset_integ_id = ? \n")
                + (smode == 0 ? " and " : "")
                + (smode == 2 ? "" : "sbl.order_number = ? ")
        );
        psBPro = dbStg.createPS("select * from MFRSADM.nova_brm_product_glid@EDWH_LINK_OPERATE where poid_Id0 = ? "
                + "and rescource = ? and tm_relationsip_code = ? ");
        psBPur = dbStg.createPS("select * from MFRSADM.nova_brm_purchase_product@EDWH_LINK_OPERATE where purchased_poid = ? ");

      } catch (SQLException e) {
        Utilities.popup("Error Prepping DB query: " + e.getMessage());
        Utilities.log(me, "error creating prepared statement", 1);
//        closeDBs();
        return;
      }

      // begin process the list
      int counter = 0;
      pbar.switchToDeterminate(inputdata.size());
      for (String input : inputdata) {

        pbar.progress(input, counter);
        counter++;

        // search from eai
        try {

          if (smode == 0) {
            // search based on both type
            Utilities.log(me, "processing input: " + input, 3);
            String[] sinput = input.split("\\|");
            if (sinput.length != 2) {
              Utilities.log(me, "Bad input: " + input, 1);
              continue;
            }

            String[] orderlist = sinput[0].split(",");
            String[] assetlist = sinput[1].split(",");

            if (orderlist.length == 0 || assetlist.length == 0) {
              Utilities.log(me, "Bad input: " + input, 1);
              continue;
            }

            // process for all combo
            for (String oder : orderlist) {
              for (String aset : assetlist) {
                Utilities.log(me, "combo: " + oder + " " + aset, 3);
                psOEai.setString(2, oder.trim());
                psOEai.setString(1, aset.trim());
                ResultSet rs = psOEai.executeQuery();
                getOrder(input, rs, psBPro, psBPur);
              }
            }

          } else {
            psOEai.setString(1, input.trim());
            ResultSet rs = psOEai.executeQuery();

            getOrder(input, rs, psBPro, psBPur);
          }

        } catch (SQLException e) {
          Utilities.log(me, "Error getting EAI order for " + input + ". " + e.toString(), constant.ERROR);
        }

        tiOEAI.refire();
        tiOPro.refire();
        tiOPur.refire();

      }

//      closeDBs();
    }

    private void cvSearch() {
      pbar.progress("Loading input");
      if (!loadInput(txtCVInput)) {
        return;
      }

      PreparedStatement psearch;

      boolean vaiSelected = rbCVVai.isSelected();
      int inputtype = 0;

      if (vaiSelected) {
        tiCVRes = new MCVVai();

        try {
          psearch = dbStg.createPS("select * from mfrsadm.NOVA_SIEBEL_INTEG_ID@EDWH_LINK_OPERATE where asset_integ_id = ? ");
        } catch (SQLException e) {
          Utilities.popup("Error Prepping DB query: " + e.getMessage());
          Utilities.log(me, "error creating prepared statement", 1);
          return;
        }

      } else {
        tiCVRes = new MCVprofile();
        inputtype = cboCVinput.getSelectedIndex();

        try {

          Utilities.log(me, "Selected search filter type: " + cboCVinput.getItemAt(inputtype), constant.DEBUG);

          switch (inputtype) {
            case 0:
              psearch = dbStg.createPS("select * from mfrsadm.NOVA_DATA_CUSTOMER_PROFILE@EDWH_LINK_OPERATE where asst_integ_id = ? ");
              break;
            case 1:
              psearch = dbStg.createPS("select * from mfrsadm.NOVA_DATA_CUSTOMER_PROFILE@EDWH_LINK_OPERATE where account_number = ? and service_number = ? ");
              break;
            case 2:
              psearch = dbStg.createPS("select * from mfrsadm.NOVA_DATA_CUSTOMER_PROFILE@EDWH_LINK_OPERATE where account_number = ? ");
              break;
            case 3:
              psearch = dbStg.createPS("select * from mfrsadm.NOVA_DATA_CUSTOMER_PROFILE@EDWH_LINK_OPERATE where service_number = ? ");
              break;
            default:
              Utilities.log(me, "Unknown search filter type: " + cboCVinput.getItemAt(inputtype), constant.ERROR);
              return;

          }

        } catch (SQLException e) {
          Utilities.popup("Error Prepping DB query: " + e.getMessage());
          Utilities.log(me, "error creating prepared statement", 1);
          return;
        }

      }
      
      tCVResult.setModel(tiCVRes);

      int counter = 0;
      pbar.switchToDeterminate(inputdata.size());
      for (String input : inputdata) {
        pbar.progress(counter);
        counter++;

        // skip empty lines
        if (input.trim().isEmpty()) {
          continue;
        }

        try {
          // check for double input type (ba# | service)
          if (inputtype == 1) {
            String[] d = input.split("\\|");
            if (d.length != 2) {
              Utilities.log(me, "Bad input: " + input, constant.ERROR);
              continue;
            }

            psearch.setString(1, d[0].trim());
            psearch.setString(2, d[1].trim());

          } else {
            psearch.setString(1, input.trim());
          }
        } catch (SQLException e) {
          Utilities.log(me, input + " " + e.toString(), constant.ERROR);
          continue;
        }

        try {
          ResultSet rs = psearch.executeQuery();

          // load the data into table
          while(rs.next()){
//            Utilities.log(me, "got data", constant.ERROR);
            tiCVRes.add(getExpData(rs, tiCVRes.getHeader()));
          }
          
//          Utilities.log(me, "table size: " + tiCVRes.getRowCount(), constant.ERROR);

        } catch (SQLException e) {
          Utilities.log(me, "error searching for " + input + " " + e.toString(), constant.ERROR);
        }
        
        tiCVRes.refire();

      }

    }

    private void getOrder(String input, ResultSet rs, PreparedStatement psBPro, PreparedStatement psBPur) throws SQLException {

      while (rs.next()) {
        ArrayList<String> data = new ArrayList<String>();

        data.add(dbHandler.dbGetString(rs, "order_number"));
        data.add(dbHandler.dbGetString(rs, "asset_integ_id"));
        data.add(dbHandler.dbGetString(rs, "product_type"));
        data.add(dbHandler.dbGetString(rs, "BILLING_NUMBER"));

        String relcode = dbHandler.dbGetString(rs, "relationship_code");
        data.add(relcode);

        String whyringgitcurrency = dbHandler.dbGetString(rs, "currency");
        data.add(whyringgitcurrency);
        data.add(dbHandler.dbGetString(rs, "part_number"));
        data.add(dbHandler.dbGetString(rs, "order_type"));
        data.add(dbHandler.dbGetString(rs, "action_code"));
        data.add(dbHandler.dbGetString(rs, "product"));
        data.add(dbHandler.dbGetString(rs, "completed_date"));

        String brmpur = dbHandler.dbGetString(rs, "brm_purchased_product_poid");
        data.add(brmpur);

        String brmpro = dbHandler.dbGetString(rs, "brm_product_poid");
        data.add(brmpro);

        data.add(dbHandler.dbGetString(rs, "sub_prod_type"));

        tiOEAI.add(data);

        if (!brmpro.trim().isEmpty() && !brmpro.equals("null")) {
          // search for product
          try {
            psBPro.setString(1, brmpro);
            psBPro.setString(2, whyringgitcurrency);
            psBPro.setString(3, relcode);
            ResultSet rspro = psBPro.executeQuery();

            loadProduct(rspro, input);

          } catch (SQLException e) {
            Utilities.logStack(me, e);
          }
        }

        if (!brmpur.isEmpty() && !brmpur.equals("null")) {
          // search for product
          try {
            psBPur.setString(1, brmpur);
            ResultSet rspur = psBPur.executeQuery();

            loadPurchased(rspur, input);

          } catch (SQLException e) {
            Utilities.logStack(me, e);
          }
        }

      }
    }

    private void csDownload() {
      int countacc = tiCSAcc.getRowCount();
      int countsvc = tiCSSvc.getRowCount();
      int totalrecord = countacc + countsvc;
      int processcount = 0;

      if (totalrecord == 0) {
        return;
      }

      File save = getSaveLocation();

      if (noFileCHoosen) {
        return;
      }

      ExcelCreator ec = new ExcelCreator(save);
      pbar.switchToDeterminate(totalrecord);

      if (countacc > 0) {
        ec.addSheet("Account Cost Center", tiCSAcc.getHeader());
        for (int i = 0; i < countacc; i++) {
          ec.addline(tiCSAcc.getWholeRow(i));
          pbar.progress(processcount++);
        }
      }

      if (countsvc > 0) {
        ec.addSheet("Service Cost Center", tiCSSvc.getHeader());
        for (int i = 0; i < countsvc; i++) {
          ec.addline(tiCSSvc.getWholeRow(i));
          pbar.progress(processcount++);
        }
      }

      ec.flush();

    }

    private void proDownload() {
      int rowcount = tiProRes.getRowCount();
      if (rowcount == 0) {
        return;
      }

      File save = getSaveLocation();

      if (noFileCHoosen) {
        return;
      }

      ExcelCreator ec = new ExcelCreator(save);

      ec.addSheet("Product", tiProRes.getHeader());

      pbar.switchToDeterminate(rowcount);

      for (int i = 0; i < rowcount; i++) {
        ec.addline(tiProRes.getWholeRow(i));
        pbar.progress(i);
      }

      ec.flush();

    }

    private void cvDownload(){
      
      Utilities.log(me, "checking for data availability", constant.DEBUG);
      int rowcount = tiCVRes.getRowCount();
      if (rowcount == 0) {
        Utilities.log(me, "No data to download", constant.DEBUG);
        return;
      }

      Utilities.log(me, "Asking for save location", constant.DEBUG);
      File save = getSaveLocation();

      if (noFileCHoosen) {
        Utilities.log(me, "save location not specified", constant.DEBUG);
        return;
      }

      Utilities.log(me, "Initializing the excel creator", constant.DEBUG);
      ExcelCreator ec = new ExcelCreator(save);

      Utilities.log(me, "creating new sheet in excel creator", constant.DEBUG);
      ec.addSheet("CP VAI", tiCVRes.getHeader());

      pbar.switchToDeterminate(rowcount);

      Utilities.log(me, "dumping the table content into the excel", constant.DEBUG);
      for (int i = 0; i < rowcount; i++) {
        ec.addline(tiCVRes.getWholeRow(i));
        pbar.progress(i);
      }

      Utilities.log(me, "flushing the excel file", constant.DEBUG);
      ec.flush();
    }
    
    private void oDownload() {
      int counteai = tiOEAI.getRowCount();
      int countpro = tiOPro.getRowCount();
      int countpur = tiOPur.getRowCount();

      int totalrecord = counteai + countpro + countpur;
      int processcount = 0;

      Utilities.log(me, "Total record to export: " + totalrecord, 3);
      if (totalrecord == 0) {
        return;
      }

      File save = getSaveLocation();

      if (noFileCHoosen) {
        Utilities.log(me, "No save file choosen", 3);
        return;
      }

      ExcelCreator ec = new ExcelCreator(save);
      pbar.switchToDeterminate(totalrecord);

      if (counteai > 0) {
        Utilities.log(me, "Saving EAI data", 3);
        ec.addSheet("Order", tiOEAI.getHeader());
        for (int i = 0; i < counteai; i++) {
          ec.addline(tiOEAI.getWholeRow(i));
          pbar.progress(processcount++);
        }
      }

      if (countpro > 0) {
        Utilities.log(me, "Saving Product data", 3);
        ec.addSheet("Product", tiOPro.getHeader());
        for (int i = 0; i < countpro; i++) {
          ec.addline(tiOPro.getWholeRow(i));
          pbar.progress(processcount++);
        }
      }

      if (countpur > 0) {
        Utilities.log(me, "Saving Purchased data", 3);
        ec.addSheet("Purchased", tiOPur.getHeader());
        for (int i = 0; i < countpur; i++) {
          ec.addline(tiOPur.getWholeRow(i));
          pbar.progress(processcount++);
        }
      }

      Utilities.log(me, "Flushing data to file", 3);
      ec.flush();

    }

    private void loadProduct(ResultSet rs, String input) {

      ArrayList<String> data = new ArrayList<String>();

      try {

        while (rs.next()) {
          data.add(dbHandler.dbGetString(rs, "NAME"));
          data.add(dbHandler.dbGetString(rs, "POID_ID0"));
          data.add(dbHandler.dbGetString(rs, "BILL_DESCRIPTION"));
          data.add(dbHandler.dbGetString(rs, "PRE_CONFIGURED_PRICE"));
          data.add(dbHandler.dbGetString(rs, "PERMITTED"));
          data.add(dbHandler.dbGetString(rs, "PRODUCT_TYPE"));
          data.add(dbHandler.dbGetString(rs, "GLID"));
          data.add(dbHandler.dbGetString(rs, "GLID_DESCR"));
          data.add(dbHandler.dbGetString(rs, "EVENT_TYPE"));
          data.add(dbHandler.dbGetString(rs, "RESCOURCE"));
          data.add(dbHandler.dbGetString(rs, "GL_ACCOUNT"));
          data.add(dbHandler.dbGetString(rs, "TM_PRODUCT_CODE"));
          data.add(dbHandler.dbGetString(rs, "TM_RELATIONSHIP_CODE"));
          data.add(dbHandler.dbGetString(rs, "TM_SERVICE_CLASS_CODE"));
          data.add(dbHandler.dbGetString(rs, "TM_COMMERCIAL_OFFER"));
          data.add(dbHandler.dbGetString(rs, "QUANTITY"));
          data.add(dbHandler.dbGetString(rs, "SERVICE_POID_TYPE"));

          if (mode.equals("Search Product")) {
            tiProRes.add(data);
          } else {
            tiOPro.add(data);
          }

        }

      } catch (SQLException e) {
        Utilities.log(me, mode + " Error loading product " + input + ". " + e.toString(), constant.ERROR);
      }

    }

    private void loadPurchased(ResultSet rs, String input) {

      ArrayList<String> data = new ArrayList<String>();

      try {

        while (rs.next()) {
          data.add(dbHandler.dbGetString(rs, "PURCHASED_POID"));
          data.add(dbHandler.dbGetString(rs, "PRODUCT_POID"));
          data.add(dbHandler.dbGetString(rs, "PRODUCT_DESCR"));
          data.add(dbHandler.dbGetString(rs, "CREATED_T"));
          data.add(dbHandler.dbGetString(rs, "PURCHASE_START_T"));
          data.add(dbHandler.dbGetString(rs, "PURCHASE_END_T"));
          data.add(dbHandler.dbGetString(rs, "STATUS"));

          if (mode.equals("Search Product")) {
            tiProRes.add(data);
          } else {
            tiOPur.add(data);
          }

        }

      } catch (SQLException e) {
        Utilities.log(me, mode + " Error loading purchased  " + input + ". " + e.toString(), constant.ERROR);
      }

    }

  }

}
